basePath: /api/v1
definitions:
  enums.CreditType:
    enum:
    - SHORT_TERM
    - LONG_TERM
    type: string
    x-enum-varnames:
    - ShortTerm
    - LongTerm
  enums.InstallmentStatus:
    enum:
    - PENDING
    - PAID
    - OVERDUE
    type: string
    x-enum-varnames:
    - Pending
    - Paid
    - Overdue
  enums.InterestType:
    enum:
    - NOMINAL
    - EFFECTIVE
    type: string
    x-enum-varnames:
    - Nominal
    - Effective
  enums.PaymentMethod:
    enum:
    - YAPE
    - PLIN
    - CASH
    type: string
    x-enum-varnames:
    - YAPE
    - PLIN
    - CASH
  enums.PaymentStatus:
    enum:
    - PENDING
    - SUCCESS
    - FAILED
    type: string
    x-enum-varnames:
    - PENDING
    - SUCCESS
    - FAILED
  enums.ProductCategory:
    enum:
    - Grocery
    - FruitAndVeg
    - Meat
    - Poultry
    - Seafood
    - Bakery
    - Liquor
    - GeneralStore
    type: string
    x-enum-varnames:
    - ProductCategoryGrocery
    - ProductCategoryFruitAndVeg
    - ProductCategoryMeat
    - ProductCategoryPoultry
    - ProductCategorySeafood
    - ProductCategoryBakery
    - ProductCategoryLiquor
    - ProductCategoryGeneralStore
  enums.Role:
    enum:
    - ADMIN
    - CLIENT
    - USER
    type: string
    x-enum-varnames:
    - ADMIN
    - CLIENT
    - USER
  enums.TransactionType:
    enum:
    - PURCHASE
    - PAYMENT
    type: string
    x-enum-varnames:
    - Purchase
    - Payment
  request.CreateAdminAndEstablishmentRequest:
    properties:
      address:
        minLength: 5
        type: string
      dni:
        description: User fields
        maxLength: 8
        minLength: 8
        type: string
      email:
        type: string
      establishment_address:
        type: string
      establishment_name:
        type: string
      establishment_phone:
        type: string
      establishment_ruc:
        description: Establishment fields
        type: string
      late_fee_percentage:
        description: Optional, can be set later
        type: number
      name:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        maxLength: 9
        minLength: 9
        type: string
    required:
    - address
    - dni
    - email
    - establishment_address
    - establishment_name
    - establishment_phone
    - establishment_ruc
    - name
    - password
    - phone
    type: object
  request.CreateClientRequest:
    properties:
      address:
        minLength: 5
        type: string
      credit_limit:
        type: number
      credit_type:
        $ref: '#/definitions/enums.CreditType'
      dni:
        maxLength: 8
        minLength: 8
        type: string
      email:
        description: Optional email
        type: string
      establishment_id:
        type: integer
      grace_period:
        minimum: 0
        type: integer
      interest_rate:
        type: number
      interest_type:
        $ref: '#/definitions/enums.InterestType'
      late_fee_percentage:
        type: number
      monthly_due_date:
        maximum: 31
        minimum: 1
        type: integer
      name:
        type: string
      phone:
        maxLength: 9
        minLength: 9
        type: string
    required:
    - address
    - credit_limit
    - credit_type
    - dni
    - establishment_id
    - interest_rate
    - interest_type
    - monthly_due_date
    - name
    - phone
    type: object
  request.CreateCreditAccountRequest:
    properties:
      client_id:
        type: integer
      credit_limit:
        type: number
      credit_type:
        $ref: '#/definitions/enums.CreditType'
      grace_period:
        description: Optional, for long-term credit
        minimum: 0
        type: integer
      interest_rate:
        type: number
      interest_type:
        $ref: '#/definitions/enums.InterestType'
      monthly_due_date:
        maximum: 31
        minimum: 1
        type: integer
    required:
    - client_id
    - credit_limit
    - credit_type
    - interest_rate
    - interest_type
    - monthly_due_date
    type: object
  request.CreateEstablishmentRequest:
    properties:
      address:
        type: string
      image_url:
        type: string
      late_fee_percentage:
        type: number
      name:
        type: string
      phone:
        type: string
      ruc:
        type: string
    required:
    - address
    - name
    - phone
    - ruc
    type: object
  request.CreateInstallmentRequest:
    properties:
      amount:
        type: number
      credit_account_id:
        type: integer
      due_date:
        type: string
    required:
    - amount
    - credit_account_id
    - due_date
    type: object
  request.CreateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      establishment_id:
        type: integer
      image_url:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - description
    - establishment_id
    - name
    - price
    - stock
    type: object
  request.CreatePurchaseRequest:
    properties:
      amount:
        type: number
      credit_type:
        $ref: '#/definitions/enums.CreditType'
      establishment_id:
        type: integer
      product_ids:
        items:
          type: integer
        type: array
    required:
    - amount
    - credit_type
    - establishment_id
    - product_ids
    type: object
  request.CreateTransactionRequest:
    properties:
      amount:
        type: number
      credit_account_id:
        type: integer
      description:
        type: string
      payment_method:
        allOf:
        - $ref: '#/definitions/enums.PaymentMethod'
        description: Add PaymentMethod
      transaction_type:
        $ref: '#/definitions/enums.TransactionType'
    required:
    - amount
    - credit_account_id
    - payment_method
    - transaction_type
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.ResetPasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  request.UpdateCreditAccountRequest:
    properties:
      credit_limit:
        type: number
      credit_type:
        $ref: '#/definitions/enums.CreditType'
      grace_period:
        minimum: 0
        type: integer
      interest_rate:
        type: number
      interest_type:
        $ref: '#/definitions/enums.InterestType'
      is_blocked:
        type: boolean
      late_fee_percentage:
        type: number
      monthly_due_date:
        maximum: 31
        minimum: 1
        type: integer
    type: object
  request.UpdateEstablishmentRequest:
    properties:
      address:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      late_fee_percentage:
        description: Optional
        type: number
      name:
        type: string
      phone:
        type: string
      ruc:
        type: string
    required:
    - address
    - name
    - phone
    - ruc
    type: object
  request.UpdateInstallmentRequest:
    properties:
      amount:
        type: number
      due_date:
        type: string
      status:
        $ref: '#/definitions/enums.InstallmentStatus'
    type: object
  request.UpdateProductRequest:
    properties:
      category:
        $ref: '#/definitions/enums.ProductCategory'
      description:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    type: object
  request.UpdateTransactionRequest:
    properties:
      amount:
        type: number
      description:
        type: string
      transaction_type:
        $ref: '#/definitions/enums.TransactionType'
    type: object
  request.UpdateUserRequest:
    properties:
      address:
        description: Optional
        type: string
      name:
        description: Optional
        type: string
      phone:
        description: Optional
        type: string
      photo_url:
        description: Optional
        type: string
    type: object
  response.AccountStatementResponse:
    properties:
      client_id:
        type: integer
      end_date:
        type: string
      start_date:
        type: string
      starting_balance:
        type: number
      transactions:
        items:
          $ref: '#/definitions/response.TransactionResponse'
        type: array
    type: object
  response.AccountSummaryResponse:
    properties:
      current_balance:
        type: number
      due_date:
        type: string
      total_interest:
        type: number
      transactions:
        items:
          $ref: '#/definitions/response.TransactionResponse'
        type: array
    type: object
  response.AdminDebtSummary:
    properties:
      client_id:
        type: integer
      client_name:
        type: string
      credit_type:
        type: string
      current_balance:
        type: number
      due_date:
        description: For short-term or next installment
        type: string
      interest_rate:
        type: number
      number_of_installments:
        description: Only for long-term
        type: integer
    type: object
  response.AdminResponse:
    properties:
      establishment:
        $ref: '#/definitions/response.EstablishmentResponse'
      user:
        $ref: '#/definitions/response.UserResponse'
    type: object
  response.AuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.ClientBalanceResponse:
    properties:
      client_id:
        type: integer
      current_balance:
        type: number
    type: object
  response.CreditAccountResponse:
    properties:
      client:
        $ref: '#/definitions/response.UserResponse'
      client_id:
        type: integer
      created_at:
        type: string
      credit_limit:
        type: number
      credit_type:
        $ref: '#/definitions/enums.CreditType'
      current_balance:
        type: number
      establishment:
        $ref: '#/definitions/response.EstablishmentResponse'
      establishment_id:
        type: integer
      grace_period:
        type: integer
      id:
        type: integer
      interest_rate:
        type: number
      interest_type:
        $ref: '#/definitions/enums.InterestType'
      is_blocked:
        type: boolean
      last_interest_accrual_date:
        type: string
      late_fee_percentage:
        type: number
      monthly_due_date:
        type: integer
      updated_at:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  response.EstablishmentResponse:
    properties:
      address:
        type: string
      admin:
        $ref: '#/definitions/response.UserResponse'
      admin_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      image_url:
        type: string
      is_active:
        type: boolean
      late_fee_percentage:
        type: number
      name:
        type: string
      phone:
        type: string
      ruc:
        type: string
      updated_at:
        type: string
    type: object
  response.InstallmentResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      credit_account_id:
        type: integer
      due_date:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/enums.InstallmentStatus'
      updated_at:
        type: string
    type: object
  response.ProductResponse:
    properties:
      category:
        $ref: '#/definitions/enums.ProductCategory'
      created_at:
        type: string
      description:
        type: string
      establishment:
        $ref: '#/definitions/response.EstablishmentResponse'
      establishment_id:
        type: integer
      id:
        type: integer
      image_url:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  response.TransactionResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      credit_account_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      payment_code:
        description: Add PaymentCode (if generated)
        type: string
      payment_method:
        allOf:
        - $ref: '#/definitions/enums.PaymentMethod'
        description: Add PaymentMethod
      payment_status:
        allOf:
        - $ref: '#/definitions/enums.PaymentStatus'
        description: Add PaymentStatus
      transaction_date:
        type: string
      transaction_type:
        $ref: '#/definitions/enums.TransactionType'
      updated_at:
        type: string
    type: object
  response.UserResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      dni:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      photo_url:
        type: string
      rol:
        $ref: '#/definitions/enums.Role'
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for managing finances in small businesses.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Final Assignment Finance API Rest
  version: "1.0"
paths:
  /admins/me:
    get:
      description: Retrieves the profile information of the authenticated admin.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AdminResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Admin Profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates the profile information of the authenticated admin.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated admin data
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AdminResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Admin Profile
      tags:
      - Users
  /clients:
    post:
      consumes:
      - application/json
      description: Creates a new client user with an associated credit account. Only
        Admins can create clients.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client data
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/request.CreateClientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create Client
      tags:
      - Users
  /clients/{clientID}/credit-account:
    get:
      description: Retrieves a credit account associated with a specific client.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client ID
        in: path
        name: clientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreditAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Credit Account by Client ID
      tags:
      - Credit Accounts
    put:
      consumes:
      - application/json
      description: Updates credit account details of a client. Only Admins can update
        credit accounts.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client User ID
        in: path
        name: clientID
        required: true
        type: integer
      - description: Updated credit account data
        in: body
        name: creditAccount
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCreditAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreditAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Client Credit Account
      tags:
      - Credit Accounts
  /clients/me/account-statement:
    get:
      description: Retrieves an account statement for the client within a specified
        date range.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: startDate
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: endDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AccountStatementResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Account Statement
      tags:
      - Clients
  /clients/me/account-statement/pdf:
    get:
      description: Generates and downloads a PDF account statement for the client
        within a specified date range.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: startDate
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: endDate
        type: string
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Account Statement (PDF)
      tags:
      - Clients
  /clients/me/account-summary:
    get:
      description: Retrieves a summary of the client's account, including transactions,
        payments, debts, and interest.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AccountSummaryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Account Summary
      tags:
      - Clients
  /clients/me/balance:
    get:
      consumes:
      - application/json
      description: Gets the current balance of the authenticated client's credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ClientBalanceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Balance
      tags:
      - Clients
  /clients/me/credit-account:
    get:
      consumes:
      - application/json
      description: Gets the credit account details of the authenticated client.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreditAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Credit Account
      tags:
      - Clients
  /clients/me/installments:
    get:
      consumes:
      - application/json
      description: Gets the installments of the authenticated client's credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.InstallmentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Installments
      tags:
      - Clients
  /clients/me/overdue-balance:
    get:
      consumes:
      - application/json
      description: Gets the overdue balance of the authenticated client's credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: number
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Overdue Balance
      tags:
      - Clients
  /clients/me/password:
    put:
      consumes:
      - application/json
      description: Updates the password for the authenticated client.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: New password data
        in: body
        name: newPassword
        required: true
        schema:
          $ref: '#/definitions/request.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Client Password
      tags:
      - Users
  /clients/me/transactions:
    get:
      consumes:
      - application/json
      description: Gets the transaction history of the authenticated client.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Client Transactions
      tags:
      - Clients
  /credit-accounts:
    post:
      consumes:
      - application/json
      description: Creates a new credit account for a client.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit account data
        in: body
        name: creditAccount
        required: true
        schema:
          $ref: '#/definitions/request.CreateCreditAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.CreditAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create Credit Account
      tags:
      - Credit Accounts
  /credit-accounts/{creditAccountID}/apply-interest:
    post:
      description: Applies interest to a specific credit account. Only Admins can
        apply interest.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: creditAccountID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Apply Interest to Account
      tags:
      - Credit Accounts
  /credit-accounts/{creditAccountID}/apply-late-fee:
    post:
      description: Applies a late fee to a specific credit account. Only Admins can
        apply late fees.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: creditAccountID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Apply Late Fee to Account
      tags:
      - Credit Accounts
  /credit-accounts/{creditAccountID}/installments:
    get:
      description: Retrieves installments associated with a specific credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: creditAccountID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.InstallmentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Installments by Credit Account ID
      tags:
      - Installments
  /credit-accounts/{creditAccountID}/installments/overdue:
    get:
      description: Retrieves overdue installments for a specific credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: creditAccountID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.InstallmentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Overdue Installments by Credit Account ID
      tags:
      - Installments
  /credit-accounts/{creditAccountID}/payments:
    post:
      consumes:
      - application/json
      description: Processes a payment towards a client's credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: creditAccountID
        required: true
        type: integer
      - description: Payment details
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/request.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Process Payment
      tags:
      - Credit Accounts
  /credit-accounts/{creditAccountID}/purchases:
    post:
      consumes:
      - application/json
      description: Processes a purchase on a client's credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: creditAccountID
        required: true
        type: integer
      - description: Purchase details
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/request.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Process Purchase
      tags:
      - Credit Accounts
  /credit-accounts/{creditAccountID}/transactions:
    get:
      consumes:
      - application/json
      description: Get all transactions for a specific credit account.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: creditAccountID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Transaction by Credit Account ID
      tags:
      - Transactions
  /credit-accounts/{id}:
    delete:
      description: Deletes a credit account by its ID. Only Admins can delete credit
        accounts.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete Credit Account
      tags:
      - Credit Accounts
    get:
      consumes:
      - application/json
      description: Gets a credit account by its ID.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreditAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Credit Account by ID
      tags:
      - Credit Accounts
    put:
      consumes:
      - application/json
      description: Updates a credit account by its ID. Only Admins can update credit
        accounts.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Credit Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated credit account data
        in: body
        name: creditAccount
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCreditAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreditAccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Credit Account
      tags:
      - Credit Accounts
  /credit-accounts/debt-summary:
    get:
      description: Retrieves a summary of all client debts for an establishment. Only
        Admins can access this endpoint.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.AdminDebtSummary'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Admin Debt Summary
      tags:
      - Credit Accounts
  /credit-accounts/overdue:
    get:
      description: Retrieves all overdue credit accounts for the authenticated admin\'s
        establishment.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.CreditAccountResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Overdue Credit Accounts
      tags:
      - Credit Accounts
  /establishments:
    post:
      consumes:
      - application/json
      description: Creates a new establishment for the authenticated admin.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Establishment data
        in: body
        name: establishment
        required: true
        schema:
          $ref: '#/definitions/request.CreateEstablishmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.EstablishmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create Establishment
      tags:
      - Establishments
  /establishments/{establishmentID}:
    get:
      description: Gets an establishment by its ID.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Establishment ID
        in: path
        name: establishmentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EstablishmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Establishment by ID
      tags:
      - Establishments
  /establishments/{establishmentID}/clients:
    get:
      consumes:
      - application/json
      description: Gets all clients associated with an establishment. Only Admins
        can access this endpoint.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Establishment ID
        in: path
        name: establishmentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Clients by Establishment ID
      tags:
      - Users
  /establishments/{establishmentID}/credit-accounts:
    get:
      description: Retrieves all credit accounts associated with an establishment.
        Only Admins can access this endpoint.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Establishment ID
        in: path
        name: establishmentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.CreditAccountResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Credit Accounts by Establishment ID
      tags:
      - Credit Accounts
  /establishments/{establishmentID}/products:
    get:
      consumes:
      - application/json
      description: Gets all products associated with an establishment.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Establishment ID
        in: path
        name: establishmentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ProductResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Products by Establishment ID
      tags:
      - Products
  /establishments/me:
    get:
      description: Gets the establishment details for the authenticated admin.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EstablishmentResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Establishment
      tags:
      - Establishments
    put:
      consumes:
      - application/json
      description: Updates the establishment details for the authenticated admin.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated establishment data
        in: body
        name: establishment
        required: true
        schema:
          $ref: '#/definitions/request.UpdateEstablishmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EstablishmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Establishment
      tags:
      - Establishments
  /installments:
    post:
      consumes:
      - application/json
      description: Creates a new installment for a credit account. Only Admins can
        create installments.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Installment data
        in: body
        name: installment
        required: true
        schema:
          $ref: '#/definitions/request.CreateInstallmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.InstallmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create Installment
      tags:
      - Installments
  /installments/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an installment by its ID. Only Admins can delete installments.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Installment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete Installment
      tags:
      - Installments
    get:
      description: Gets an installment by its ID.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Installment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InstallmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Installment by ID
      tags:
      - Installments
    put:
      consumes:
      - application/json
      description: Updates an existing installment. Only Admins can update installments.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Installment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated installment details
        in: body
        name: installment
        required: true
        schema:
          $ref: '#/definitions/request.UpdateInstallmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InstallmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Installment
      tags:
      - Installments
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user with their email and password.
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login
      tags:
      - Authentication
  /products:
    post:
      consumes:
      - application/json
      description: Creates a new product for the authenticated admin\'s establishment.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/request.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create Product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product by its ID. Only Admins can delete products.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete Product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Gets a product by its ID.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Updates an existing product. Only admins can update products.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Product
      tags:
      - Products
  /purchases:
    post:
      consumes:
      - application/json
      description: Processes a product purchase by a user.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Purchase Data
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/request.CreatePurchaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a Purchase
      tags:
      - Purchases
  /refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using a valid refresh token.
      parameters:
      - description: Bearer {refreshToken}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh Token
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new admin user along with their establishment.
      parameters:
      - description: Admin and establishment registration data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/request.CreateAdminAndEstablishmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register Admin
      tags:
      - Authentication
  /reset-password:
    post:
      consumes:
      - application/json
      description: Resets the password for the authenticated user.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reset password request data
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/request.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Reset Password
      tags:
      - Authentication
  /transactions:
    post:
      consumes:
      - application/json
      description: Create a new transaction (purchase or payment).
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction Data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/request.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create Transaction
      tags:
      - Transactions
  /transactions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a transaction by its ID. Only admins can delete transactions.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete Transaction
      tags:
      - Transactions
    get:
      consumes:
      - application/json
      description: Get a transaction by its ID.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Transaction by ID
      tags:
      - Transactions
    put:
      consumes:
      - application/json
      description: Update a transaction by its ID. Only admins can update transactions.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction Data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update Transaction
      tags:
      - Transactions
  /transactions/{id}/confirm:
    post:
      consumes:
      - application/json
      description: Confirms a pending payment using a confirmation code. Only admins
        can confirm payments.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Confirmation code
        in: body
        name: confirmation
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Confirm Payment
      tags:
      - Transactions
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their ID. Only Admins can delete users.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete User
      tags:
      - Users
    get:
      description: Retrieves a user by their ID. Admins can retrieve any user, Clients
        can only retrieve themselves.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get User by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user details, including the URL of the profile photo.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data (including photo_url)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update User
      tags:
      - Users
  /users/{id}/photo:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a profile photo for a user.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User profile photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Upload User PhotoUrl
      tags:
      - Users
  /users/email-to-id:
    get:
      description: Retrieves the ID of a user by their email address. This endpoint
        is typically for internal use or admin purposes.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid email format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden (only for admins)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get User ID by Email
      tags:
      - Users
swagger: "2.0"
